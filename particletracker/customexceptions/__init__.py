from os import error
from PyQt5.QtCore import QTimer
import functools

"""
----------------------------------------------------------------------------------------------------
These functions pick up the error messages and display them temporarily in the status bar
----------------------------------------------------------------------------------------------------
"""

def flash_error_msg(e, main_gui):
    main_gui.timer = QTimer(main_gui)
    main_gui.timer.timeout.connect(main_gui.reset_statusbar)
    main_gui.timer.start(5000)
    main_gui.status_bar.setStyleSheet("background-color : red")
    if hasattr(e, 'error'):
        main_gui.status_bar.showMessage(e.error)    
    main_gui.show()
    
def reset_statusbar(status_bar):
    status_bar.hide()

#Decorators to catch errors and propagate to BaseError in PTWorkflow
def error_handling(func):
    @functools.wraps(func)
    def wrapper_error_handling(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            error_message = 'There was an error generated by ' + func.__name__ 
            print('\n---------------------------------------\n' + error_message + '\n---------------------------------------\n')
            raise CustomError(e, error_message=error_message)
    return wrapper_error_handling

def error_return_frame(func):
    @functools.wraps(func)
    def wrapper_error_handling(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            error_message = 'There was an error generated by ' + func.__name__ 
            print('\n---------------------------------------\n' + error_message + '\n---------------------------------------\n')
            raise CustomError(e, error_message=error_message)
            return args[1]
    return wrapper_error_handling

"""
--------------------------------------------------------------
Custom base class - used only to catch all custom exceptions
--------------------------------------------------------------
"""

class BaseError(Exception):
    def __init__(self, e):
        super().__init__(e)
        #print(e)

"""
--------------------------------------------------------------
Custom class - provides a means to trace the location of error
--------------------------------------------------------------
"""    
class CustomError(BaseError):
    def __init__(self, e, error_message=None):
        super().__init__(e)
        self.error = error_message

"""
class ExperimentError(BaseError):
    def __init__(self, e):
        super().__init__(e)
        self.error_process = 'Experiment Error - '

class CropMaskError(BaseError):
    def __init__(self, e, message=None):
        super().__init__(e)
        self.error_process = 'Crop or Mask Error - '
        self.error_msg = 'Check the input image type you need to convert to single colour channel. Crop or Mask tools also throw error if no or wrong values inputted via selection tools'

class PreprocessorError(BaseError):
    def __init__(self, e, message=None):
        super().__init__(e)
        self.error_process = 'Preprocessing Error - '

     
class TrackError(BaseError):
    def __init__(self, e, message=None):
        super().__init__(e)
        self.error_process = 'Tracking Error - '

class LinkError(BaseError):
    def __init__(self, e, message=None):
        super().__init__(e)
        self.error_msg = 'A common error is to set max_frame_displacement too large.'
        self.error_process = 'Linking Error  - '

class PostprocessorError(BaseError):
    def __init__(self, e, message=None):
        super().__init__(e)
        self.error_process = 'Postprocessing Error - '

class AnnotatorError(BaseError):
    def __init__(self, e, message=None):
        super().__init__(e)
        self.error_process = 'Annotating Error - '
"""
class CsvError(BaseError):
    def __init__(self, e, message=None):
        super().__init__(e)
        self.error_process = 'Error writing to csv'

class PandasViewError(BaseError):
    def __init__(self, e, message=None):
        super().__init__(e)
        self.error_process = "Error reading dataframe in viewer"
